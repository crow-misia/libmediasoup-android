diff --git a/include/Consumer.hpp b/include/Consumer.hpp
index d41c02f..b73a5e2 100644
--- a/include/Consumer.hpp
+++ b/include/Consumer.hpp
@@ -36,8 +36,8 @@ namespace mediasoupclient
 		  const std::string& id,
 		  const std::string& localId,
 		  const std::string& producerId,
-		  webrtc::RtpReceiverInterface* rtpReceiver,
-		  webrtc::MediaStreamTrackInterface* track,
+		  webrtc::scoped_refptr<webrtc::RtpReceiverInterface> rtpReceiver,
+		  webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
 		  const nlohmann::json& rtpParameters,
 		  const nlohmann::json& appData);
 
@@ -77,9 +77,9 @@ namespace mediasoupclient
 		// Closed flag.
 		bool closed{ false };
 		// Associated RTCRtpReceiver.
-		webrtc::RtpReceiverInterface* rtpReceiver{ nullptr };
+		webrtc::scoped_refptr<webrtc::RtpReceiverInterface> rtpReceiver{ nullptr };
 		// Local track.
-		webrtc::MediaStreamTrackInterface* track{ nullptr };
+		webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track{ nullptr };
 		// RTP parameters.
 		nlohmann::json rtpParameters;
 		// Paused flag.
diff --git a/include/Handler.hpp b/include/Handler.hpp
index 6658a43..1484797 100644
--- a/include/Handler.hpp
+++ b/include/Handler.hpp
@@ -69,7 +69,7 @@ namespace mediasoupclient
 		// Got transport local and remote parameters.
 		bool transportReady{ false };
 		// Map of RTCTransceivers indexed by MID.
-		std::unordered_map<std::string, webrtc::RtpTransceiverInterface*> mapMidTransceiver{};
+		std::unordered_map<std::string, rtc::scoped_refptr<webrtc::RtpTransceiverInterface>> mapMidTransceiver{};
 		// PeerConnection instance.
 		std::unique_ptr<PeerConnection> pc{ nullptr };
 		bool hasDataChannelMediaSection = false;
@@ -85,7 +85,7 @@ namespace mediasoupclient
 		struct SendResult
 		{
 			std::string localId;
-			webrtc::RtpSenderInterface* rtpSender{ nullptr };
+			webrtc::scoped_refptr<webrtc::RtpSenderInterface> rtpSender{ nullptr };
 			nlohmann::json rtpParameters;
 		};
 
@@ -102,12 +102,12 @@ namespace mediasoupclient
 
 	public:
 		SendResult Send(
-		  webrtc::MediaStreamTrackInterface* track,
+		  rtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
 		  std::vector<webrtc::RtpEncodingParameters>* encodings,
 		  const nlohmann::json* codecOptions,
 		  const nlohmann::json* codec);
 		void StopSending(const std::string& localId);
-		void ReplaceTrack(const std::string& localId, webrtc::MediaStreamTrackInterface* track);
+		void ReplaceTrack(const std::string& localId, webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track);
 		void SetMaxSpatialLayer(const std::string& localId, uint8_t spatialLayer);
 		nlohmann::json GetSenderStats(const std::string& localId);
 		void RestartIce(const nlohmann::json& iceParameters) override;
@@ -127,8 +127,8 @@ namespace mediasoupclient
 		struct RecvResult
 		{
 			std::string localId;
-			webrtc::RtpReceiverInterface* rtpReceiver{ nullptr };
-			webrtc::MediaStreamTrackInterface* track{ nullptr };
+			webrtc::scoped_refptr<webrtc::RtpReceiverInterface> rtpReceiver{ nullptr };
+			webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track{ nullptr };
 		};
 
 	public:
diff --git a/include/PeerConnection.hpp b/include/PeerConnection.hpp
index 93b8147..3892c9f 100644
--- a/include/PeerConnection.hpp
+++ b/include/PeerConnection.hpp
@@ -48,7 +48,41 @@ namespace mediasoupclient
 			void OnInterestingUsage(int usagePattern) override;
 		};
 
-		class SetSessionDescriptionObserver : public webrtc::SetSessionDescriptionObserver
+        class SetLocalDescriptionObserver : public webrtc::SetLocalDescriptionObserverInterface
+        {
+        public:
+            SetLocalDescriptionObserver()           = default;
+            ~SetLocalDescriptionObserver() override = default;
+
+            std::future<void> GetFuture();
+            void Reject(const std::string& error);
+
+            /* Virtual methods inherited from webrtc::SetLocalDescriptionObserver. */
+        public:
+            void OnSetLocalDescriptionComplete(webrtc::RTCError error) override;
+
+        private:
+            std::promise<void> promise;
+        };
+
+        class SetRemoteDescriptionObserver : public webrtc::SetRemoteDescriptionObserverInterface
+        {
+        public:
+            SetRemoteDescriptionObserver()           = default;
+            ~SetRemoteDescriptionObserver() override = default;
+
+            std::future<void> GetFuture();
+            void Reject(const std::string& error);
+
+            /* Virtual methods inherited from webrtc::SetRemoteDescriptionObserver. */
+        public:
+            void OnSetRemoteDescriptionComplete(webrtc::RTCError error) override;
+
+        private:
+            std::promise<void> promise;
+        };
+
+        class SetSessionDescriptionObserver : public webrtc::SetSessionDescriptionObserver
 		{
 		public:
 			SetSessionDescriptionObserver()           = default;
@@ -121,16 +155,16 @@ namespace mediasoupclient
 		const std::string GetLocalDescription();
 		const std::string GetRemoteDescription();
 		std::vector<rtc::scoped_refptr<webrtc::RtpTransceiverInterface>> GetTransceivers() const;
-		rtc::scoped_refptr<webrtc::RtpTransceiverInterface> AddTransceiver(cricket::MediaType mediaType);
+		webrtc::scoped_refptr<webrtc::RtpTransceiverInterface> AddTransceiver(cricket::MediaType mediaType);
 		rtc::scoped_refptr<webrtc::RtpTransceiverInterface> AddTransceiver(
-		  rtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
+		  webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
 		  webrtc::RtpTransceiverInit rtpTransceiverInit);
-		std::vector<rtc::scoped_refptr<webrtc::RtpSenderInterface>> GetSenders();
-		bool RemoveTrack(webrtc::RtpSenderInterface* sender);
+		std::vector<webrtc::scoped_refptr<webrtc::RtpSenderInterface>> GetSenders();
+		webrtc::RTCError RemoveTrack(webrtc::scoped_refptr<webrtc::RtpSenderInterface> sender);
 		nlohmann::json GetStats();
-		nlohmann::json GetStats(rtc::scoped_refptr<webrtc::RtpSenderInterface> selector);
-		nlohmann::json GetStats(rtc::scoped_refptr<webrtc::RtpReceiverInterface> selector);
-		rtc::scoped_refptr<webrtc::DataChannelInterface> CreateDataChannel(
+		nlohmann::json GetStats(webrtc::scoped_refptr<webrtc::RtpSenderInterface> selector);
+		nlohmann::json GetStats(webrtc::scoped_refptr<webrtc::RtpReceiverInterface> selector);
+		webrtc::scoped_refptr<webrtc::DataChannelInterface> CreateDataChannel(
 		  const std::string& label, const webrtc::DataChannelInit* config);
 
 	private:
@@ -140,10 +174,10 @@ namespace mediasoupclient
 		std::unique_ptr<rtc::Thread> workerThread;
 
 		// PeerConnection factory.
-		rtc::scoped_refptr<webrtc::PeerConnectionFactoryInterface> peerConnectionFactory;
+		webrtc::scoped_refptr<webrtc::PeerConnectionFactoryInterface> peerConnectionFactory;
 
 		// PeerConnection instance.
-		rtc::scoped_refptr<webrtc::PeerConnectionInterface> pc;
+		webrtc::scoped_refptr<webrtc::PeerConnectionInterface> pc;
 	};
 } // namespace mediasoupclient
 
diff --git a/include/Producer.hpp b/include/Producer.hpp
index d8be084..4df6579 100644
--- a/include/Producer.hpp
+++ b/include/Producer.hpp
@@ -20,7 +20,7 @@ namespace mediasoupclient
 		public:
 			virtual void OnClose(Producer* producer) = 0;
 			virtual void OnReplaceTrack(
-			  const Producer* producer, webrtc::MediaStreamTrackInterface* newTrack)             = 0;
+			  const Producer* producer, webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> newTrack) = 0;
 			virtual void OnSetMaxSpatialLayer(const Producer* producer, uint8_t maxSpatialLayer) = 0;
 			virtual nlohmann::json OnGetStats(const Producer* producer)                          = 0;
 		};
@@ -38,8 +38,8 @@ namespace mediasoupclient
 		  Listener* listener,
 		  const std::string& id,
 		  const std::string& localId,
-		  webrtc::RtpSenderInterface* rtpSender,
-		  webrtc::MediaStreamTrackInterface* track,
+		  webrtc::scoped_refptr<webrtc::RtpSenderInterface> rtpSender,
+		  webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
 		  const nlohmann::json& rtpParameters,
 		  const nlohmann::json& appData);
 
@@ -58,7 +58,7 @@ namespace mediasoupclient
 		nlohmann::json GetStats() const;
 		void Pause();
 		void Resume();
-		void ReplaceTrack(webrtc::MediaStreamTrackInterface* track);
+		void ReplaceTrack(webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track);
 		void SetMaxSpatialLayer(uint8_t spatialLayer);
 
 	private:
@@ -79,9 +79,9 @@ namespace mediasoupclient
 		// Closed flag.
 		bool closed{ false };
 		// Associated RTCRtpSender.
-		webrtc::RtpSenderInterface* rtpSender{ nullptr };
+		webrtc::scoped_refptr<webrtc::RtpSenderInterface> rtpSender{ nullptr };
 		// Local track.
-		webrtc::MediaStreamTrackInterface* track{ nullptr };
+		webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track{ nullptr };
 		// RTP parameters.
 		nlohmann::json rtpParameters;
 		// Paused flag.
diff --git a/include/Transport.hpp b/include/Transport.hpp
index 90f3468..b19f180 100644
--- a/include/Transport.hpp
+++ b/include/Transport.hpp
@@ -131,7 +131,7 @@ namespace mediasoupclient
 	public:
 		Producer* Produce(
 		  Producer::Listener* producerListener,
-		  webrtc::MediaStreamTrackInterface* track,
+		  rtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
 		  const std::vector<webrtc::RtpEncodingParameters>* encodings,
 		  const nlohmann::json* codecOptions,
 		  const nlohmann::json* codec,
@@ -154,7 +154,7 @@ namespace mediasoupclient
 	public:
 		void OnClose(Producer* producer) override;
 		void OnClose(DataProducer* dataProducer) override;
-		void OnReplaceTrack(const Producer* producer, webrtc::MediaStreamTrackInterface* track) override;
+		void OnReplaceTrack(const Producer* producer, webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track) override;
 		void OnSetMaxSpatialLayer(const Producer* producer, uint8_t maxSpatialLayer) override;
 		nlohmann::json OnGetStats(const Producer* producer) override;
 
diff --git a/src/Consumer.cpp b/src/Consumer.cpp
index b0217d9..f3b3690 100644
--- a/src/Consumer.cpp
+++ b/src/Consumer.cpp
@@ -14,8 +14,8 @@ namespace mediasoupclient
 	  const std::string& id,
 	  const std::string& localId,
 	  const std::string& producerId,
-	  webrtc::RtpReceiverInterface* rtpReceiver,
-	  webrtc::MediaStreamTrackInterface* track,
+	  webrtc::scoped_refptr<webrtc::RtpReceiverInterface> rtpReceiver,
+	  webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
 	  const json& rtpParameters,
 	  const json& appData)
 	  : privateListener(privateListener), listener(listener), id(id), localId(localId),
@@ -64,14 +64,14 @@ namespace mediasoupclient
 	{
 		MSC_TRACE();
 
-		return this->rtpReceiver;
+		return this->rtpReceiver.get();
 	}
 
 	webrtc::MediaStreamTrackInterface* Consumer::GetTrack() const
 	{
 		MSC_TRACE();
 
-		return this->track;
+		return this->track.get();
 	}
 
 	const json& Consumer::GetRtpParameters() const
diff --git a/src/DataConsumer.cpp b/src/DataConsumer.cpp
index 627ea12..87ae623 100644
--- a/src/DataConsumer.cpp
+++ b/src/DataConsumer.cpp
@@ -13,7 +13,7 @@ namespace mediasoupclient
 	  DataConsumer::PrivateListener* privateListener,
 	  const std::string& id,
 	  const std::string& dataProducerId,
-	  rtc::scoped_refptr<webrtc::DataChannelInterface> dataChannel,
+	  webrtc::scoped_refptr<webrtc::DataChannelInterface> dataChannel,
 	  const json& sctpStreamParameters,
 	  const json& appData)
 	  : listener(listener), privateListener(privateListener), id(id), dataProducerId(dataProducerId),
diff --git a/src/DataProducer.cpp b/src/DataProducer.cpp
index c53119d..0da32af 100644
--- a/src/DataProducer.cpp
+++ b/src/DataProducer.cpp
@@ -11,7 +11,7 @@ namespace mediasoupclient
 	  DataProducer::PrivateListener* privateListener,
 	  DataProducer::Listener* listener,
 	  const std::string& id,
-	  rtc::scoped_refptr<webrtc::DataChannelInterface> dataChannel,
+	  webrtc::scoped_refptr<webrtc::DataChannelInterface> dataChannel,
 	  const json& sctpStreamParameters,
 	  const json& appData)
 	  : privateListener(privateListener), listener(listener), id(id), dataChannel(dataChannel),
diff --git a/src/Handler.cpp b/src/Handler.cpp
index d2ff721..19eb25e 100644
--- a/src/Handler.cpp
+++ b/src/Handler.cpp
@@ -171,7 +171,7 @@ namespace mediasoupclient
 	};
 
 	SendHandler::SendResult SendHandler::Send(
-	  webrtc::MediaStreamTrackInterface* track,
+	  webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
 	  std::vector<webrtc::RtpEncodingParameters>* encodings,
 	  const json* codecOptions,
 	  const json* codec)
@@ -212,7 +212,7 @@ namespace mediasoupclient
 		if (encodings && !encodings->empty())
 			transceiverInit.send_encodings = *encodings;
 
-		webrtc::RtpTransceiverInterface* transceiver = this->pc->AddTransceiver(track, transceiverInit);
+		webrtc::scoped_refptr<webrtc::RtpTransceiverInterface> transceiver = this->pc->AddTransceiver(track, transceiverInit);
 
 		if (!transceiver)
 			MSC_THROW_ERROR("error creating transceiver");
@@ -397,7 +397,7 @@ namespace mediasoupclient
 		// This will fill sctpStreamParameters's missing fields with default values.
 		ortc::validateSctpStreamParameters(sctpStreamParameters);
 
-		rtc::scoped_refptr<webrtc::DataChannelInterface> webrtcDataChannel =
+		webrtc::scoped_refptr<webrtc::DataChannelInterface> webrtcDataChannel =
 		  this->pc->CreateDataChannel(label, &dataChannelInit);
 
 		// Increase next id.
@@ -461,7 +461,7 @@ namespace mediasoupclient
 		if (locaIdIt == this->mapMidTransceiver.end())
 			MSC_THROW_ERROR("associated RtpTransceiver not found");
 
-		auto* transceiver = locaIdIt->second;
+		auto transceiver = locaIdIt->second;
 
 		transceiver->sender()->SetTrack(nullptr);
 		this->pc->RemoveTrack(transceiver->sender());
@@ -486,7 +486,7 @@ namespace mediasoupclient
 		this->pc->SetRemoteDescription(PeerConnection::SdpType::ANSWER, answer);
 	}
 
-	void SendHandler::ReplaceTrack(const std::string& localId, webrtc::MediaStreamTrackInterface* track)
+	void SendHandler::ReplaceTrack(const std::string& localId, webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track)
 	{
 		MSC_TRACE();
 
@@ -500,9 +500,9 @@ namespace mediasoupclient
 		if (localIdIt == this->mapMidTransceiver.end())
 			MSC_THROW_ERROR("associated RtpTransceiver not found");
 
-		auto* transceiver = localIdIt->second;
+		auto transceiver = localIdIt->second;
 
-		transceiver->sender()->SetTrack(track);
+		transceiver->sender()->SetTrack(track.get());
 	}
 
 	void SendHandler::SetMaxSpatialLayer(const std::string& localId, uint8_t spatialLayer)
@@ -516,7 +516,7 @@ namespace mediasoupclient
 		if (localIdIt == this->mapMidTransceiver.end())
 			MSC_THROW_ERROR("associated RtpTransceiver not found");
 
-		auto* transceiver = localIdIt->second;
+		auto transceiver = localIdIt->second;
 		auto parameters   = transceiver->sender()->GetParameters();
 
 		bool hasLowEncoding{ false };
@@ -583,7 +583,7 @@ namespace mediasoupclient
 		if (localIdIt == this->mapMidTransceiver.end())
 			MSC_THROW_ERROR("associated RtpTransceiver not found");
 
-		auto* transceiver = localIdIt->second;
+		auto transceiver = localIdIt->second;
 		auto stats        = this->pc->GetStats(transceiver->sender());
 
 		return stats;
@@ -690,7 +690,7 @@ namespace mediasoupclient
 
 		auto transceivers  = this->pc->GetTransceivers();
 		auto transceiverIt = std::find_if(
-		  transceivers.begin(), transceivers.end(), [&localId](webrtc::RtpTransceiverInterface* t) {
+		  transceivers.begin(), transceivers.end(), [&localId](rtc::scoped_refptr<webrtc::RtpTransceiverInterface> t) {
 			  return t->mid() == localId;
 		  });
 
@@ -729,7 +729,7 @@ namespace mediasoupclient
 		// This will fill sctpStreamParameters's missing fields with default values.
 		ortc::validateSctpStreamParameters(sctpStreamParameters);
 
-		rtc::scoped_refptr<webrtc::DataChannelInterface> webrtcDataChannel =
+		webrtc::scoped_refptr<webrtc::DataChannelInterface> webrtcDataChannel =
 		  this->pc->CreateDataChannel(label, &dataChannelInit);
 
 		// If this is the first DataChannel we need to create the SDP answer with
@@ -781,7 +781,7 @@ namespace mediasoupclient
 		if (localIdIt == this->mapMidTransceiver.end())
 			MSC_THROW_ERROR("associated RtpTransceiver not found");
 
-		auto& transceiver = localIdIt->second;
+		auto transceiver = localIdIt->second;
 
 		MSC_DEBUG("disabling mid:%s", transceiver->mid().value().c_str());
 
@@ -816,7 +816,7 @@ namespace mediasoupclient
 		if (localIdIt == this->mapMidTransceiver.end())
 			MSC_THROW_ERROR("associated RtpTransceiver not found");
 
-		auto& transceiver = localIdIt->second;
+		auto transceiver = localIdIt->second;
 
 		// May throw.
 		auto stats = this->pc->GetStats(transceiver->receiver());
diff --git a/src/PeerConnection.cpp b/src/PeerConnection.cpp
index 849db1f..3b764fc 100644
--- a/src/PeerConnection.cpp
+++ b/src/PeerConnection.cpp
@@ -73,7 +73,7 @@ namespace mediasoupclient
 		if ((options != nullptr) && (options->factory != nullptr))
 		{
 			this->peerConnectionFactory =
-			  rtc::scoped_refptr<webrtc::PeerConnectionFactoryInterface>(options->factory);
+			  webrtc::scoped_refptr<webrtc::PeerConnectionFactoryInterface>(options->factory);
 		}
 		else
 		{
@@ -107,9 +107,11 @@ namespace mediasoupclient
 		config.sdp_semantics = webrtc::SdpSemantics::kUnifiedPlan;
 
 		// Create the webrtc::Peerconnection.
-		this->pc =
-		  this->peerConnectionFactory->CreatePeerConnection(config, nullptr, nullptr, privateListener);
-	}
+        webrtc::PeerConnectionDependencies dependencies(privateListener);
+        auto result = this->peerConnectionFactory->CreatePeerConnectionOrError(config, std::move(dependencies));
+
+        this->pc = result.MoveValue();
+    }
 
 	void PeerConnection::Close()
 	{
@@ -179,14 +181,14 @@ namespace mediasoupclient
 		MSC_TRACE();
 
 		webrtc::SdpParseError error;
-		webrtc::SessionDescriptionInterface* sessionDescription;
-		rtc::scoped_refptr<SetSessionDescriptionObserver> observer(
-		  new rtc::RefCountedObject<SetSessionDescriptionObserver>());
+		std::unique_ptr<webrtc::SessionDescriptionInterface> sessionDescription{ nullptr };
+		webrtc::scoped_refptr<SetLocalDescriptionObserver> observer(
+		  new rtc::RefCountedObject<SetLocalDescriptionObserver>());
 
 		const auto& typeStr = sdpType2String[type];
 		auto future         = observer->GetFuture();
 
-		sessionDescription = webrtc::CreateSessionDescription(typeStr, sdp, &error);
+		sessionDescription.reset(webrtc::CreateSessionDescription(typeStr, sdp, &error));
 		if (sessionDescription == nullptr)
 		{
 			MSC_WARN(
@@ -194,12 +196,14 @@ namespace mediasoupclient
 			  error.line.c_str(),
 			  error.description.c_str());
 
-			observer->Reject(error.description);
+            auto description = std::string(error.description);
+
+            observer->Reject(description);
 
 			return future.get();
 		}
 
-		this->pc->SetLocalDescription(observer, sessionDescription);
+		this->pc->SetLocalDescription(std::move(sessionDescription), observer);
 
 		return future.get();
 	}
@@ -209,14 +213,14 @@ namespace mediasoupclient
 		MSC_TRACE();
 
 		webrtc::SdpParseError error;
-		webrtc::SessionDescriptionInterface* sessionDescription;
-		rtc::scoped_refptr<SetSessionDescriptionObserver> observer(
-		  new rtc::RefCountedObject<SetSessionDescriptionObserver>());
+		std::unique_ptr<webrtc::SessionDescriptionInterface> sessionDescription{ nullptr };
+		webrtc::scoped_refptr<SetRemoteDescriptionObserver> observer(
+		  new rtc::RefCountedObject<SetRemoteDescriptionObserver>());
 
 		const auto& typeStr = sdpType2String[type];
 		auto future         = observer->GetFuture();
 
-		sessionDescription = webrtc::CreateSessionDescription(typeStr, sdp, &error);
+		sessionDescription.reset(webrtc::CreateSessionDescription(typeStr, sdp, &error));
 		if (sessionDescription == nullptr)
 		{
 			MSC_WARN(
@@ -224,12 +228,14 @@ namespace mediasoupclient
 			  error.line.c_str(),
 			  error.description.c_str());
 
-			observer->Reject(error.description);
+            auto description = std::string(error.description);
+
+			observer->Reject(description);
 
 			return future.get();
 		}
 
-		this->pc->SetRemoteDescription(observer, sessionDescription);
+		this->pc->SetRemoteDescription(std::move(sessionDescription), observer);
 
 		return future.get();
 	}
@@ -258,14 +264,14 @@ namespace mediasoupclient
 		return sdp;
 	}
 
-	std::vector<rtc::scoped_refptr<webrtc::RtpTransceiverInterface>> PeerConnection::GetTransceivers() const
+	std::vector<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>> PeerConnection::GetTransceivers() const
 	{
 		MSC_TRACE();
 
 		return this->pc->GetTransceivers();
 	}
 
-	rtc::scoped_refptr<webrtc::RtpTransceiverInterface> PeerConnection::AddTransceiver(
+	webrtc::scoped_refptr<webrtc::RtpTransceiverInterface> PeerConnection::AddTransceiver(
 	  cricket::MediaType mediaType)
 	{
 		MSC_TRACE();
@@ -274,7 +280,7 @@ namespace mediasoupclient
 
 		if (!result.ok())
 		{
-			rtc::scoped_refptr<webrtc::RtpTransceiverInterface> transceiver = nullptr;
+			webrtc::scoped_refptr<webrtc::RtpTransceiverInterface> transceiver = nullptr;
 
 			return transceiver;
 		}
@@ -282,8 +288,8 @@ namespace mediasoupclient
 		return result.value();
 	}
 
-	rtc::scoped_refptr<webrtc::RtpTransceiverInterface> PeerConnection::AddTransceiver(
-	  rtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
+	webrtc::scoped_refptr<webrtc::RtpTransceiverInterface> PeerConnection::AddTransceiver(
+	  webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
 	  webrtc::RtpTransceiverInit rtpTransceiverInit)
 	{
 		MSC_TRACE();
@@ -302,7 +308,7 @@ namespace mediasoupclient
 
 		if (!result.ok())
 		{
-			rtc::scoped_refptr<webrtc::RtpTransceiverInterface> transceiver = nullptr;
+			webrtc::scoped_refptr<webrtc::RtpTransceiverInterface> transceiver = nullptr;
 
 			return transceiver;
 		}
@@ -310,25 +316,25 @@ namespace mediasoupclient
 		return result.value();
 	}
 
-	std::vector<rtc::scoped_refptr<webrtc::RtpSenderInterface>> PeerConnection::GetSenders()
+	std::vector<webrtc::scoped_refptr<webrtc::RtpSenderInterface>> PeerConnection::GetSenders()
 	{
 		MSC_TRACE();
 
 		return this->pc->GetSenders();
 	}
 
-	bool PeerConnection::RemoveTrack(webrtc::RtpSenderInterface* sender)
+	webrtc::RTCError PeerConnection::RemoveTrack(webrtc::scoped_refptr<webrtc::RtpSenderInterface> sender)
 	{
 		MSC_TRACE();
 
-		return this->pc->RemoveTrack(sender);
+		return this->pc->RemoveTrackOrError(sender);
 	}
 
 	json PeerConnection::GetStats()
 	{
 		MSC_TRACE();
 
-		rtc::scoped_refptr<RTCStatsCollectorCallback> callback(
+		webrtc::scoped_refptr<RTCStatsCollectorCallback> callback(
 		  new rtc::RefCountedObject<RTCStatsCollectorCallback>());
 
 		auto future = callback->GetFuture();
@@ -338,11 +344,11 @@ namespace mediasoupclient
 		return future.get();
 	}
 
-	json PeerConnection::GetStats(rtc::scoped_refptr<webrtc::RtpSenderInterface> selector)
+	json PeerConnection::GetStats(webrtc::scoped_refptr<webrtc::RtpSenderInterface> selector)
 	{
 		MSC_TRACE();
 
-		rtc::scoped_refptr<RTCStatsCollectorCallback> callback(
+		webrtc::scoped_refptr<RTCStatsCollectorCallback> callback(
 		  new rtc::RefCountedObject<RTCStatsCollectorCallback>());
 
 		auto future = callback->GetFuture();
@@ -352,11 +358,11 @@ namespace mediasoupclient
 		return future.get();
 	}
 
-	json PeerConnection::GetStats(rtc::scoped_refptr<webrtc::RtpReceiverInterface> selector)
+	json PeerConnection::GetStats(webrtc::scoped_refptr<webrtc::RtpReceiverInterface> selector)
 	{
 		MSC_TRACE();
 
-		rtc::scoped_refptr<RTCStatsCollectorCallback> callback(
+		webrtc::scoped_refptr<RTCStatsCollectorCallback> callback(
 		  new rtc::RefCountedObject<RTCStatsCollectorCallback>());
 
 		auto future = callback->GetFuture();
@@ -366,25 +372,88 @@ namespace mediasoupclient
 		return future.get();
 	}
 
-	rtc::scoped_refptr<webrtc::DataChannelInterface> PeerConnection::CreateDataChannel(
+	webrtc::scoped_refptr<webrtc::DataChannelInterface> PeerConnection::CreateDataChannel(
 	  const std::string& label, const webrtc::DataChannelInit* config)
 	{
 		MSC_TRACE();
 
-		rtc::scoped_refptr<webrtc::DataChannelInterface> webrtcDataChannel =
-		  this->pc->CreateDataChannel(label, config);
+        auto result = this->pc->CreateDataChannelOrError(label, config);
+        if (!result.ok())
+        {
+            MSC_THROW_ERROR("Failed creating data channel");
+        }
+        return result.value();
+    }
 
-		if (webrtcDataChannel.get())
-		{
-			MSC_DEBUG("Success creating data channel");
-		}
-		else
-		{
-			MSC_THROW_ERROR("Failed creating data channel");
-		}
+    /* SetLocalDescriptionObserver */
 
-		return webrtcDataChannel;
-	}
+    std::future<void> PeerConnection::SetLocalDescriptionObserver::GetFuture()
+    {
+        MSC_TRACE();
+
+        return this->promise.get_future();
+    }
+
+    void PeerConnection::SetLocalDescriptionObserver::Reject(const std::string& error)
+    {
+        MSC_TRACE();
+
+        this->promise.set_exception(std::make_exception_ptr(MediaSoupClientError(error.c_str())));
+    }
+
+    void PeerConnection::SetLocalDescriptionObserver::OnSetLocalDescriptionComplete(webrtc::RTCError error)
+    {
+        MSC_TRACE();
+
+        if (!error.ok())
+        {
+            MSC_WARN(
+                    "webtc::SetLocalDescriptionObserver failure [%s:%s]",
+                    webrtc::ToString(error.type()),
+                    error.message());
+
+            this->Reject(error.message());
+        }
+        else
+        {
+            this->promise.set_value();
+        }
+    }
+
+    /* SetRemoteDescriptionObserver */
+
+    std::future<void> PeerConnection::SetRemoteDescriptionObserver::GetFuture()
+    {
+        MSC_TRACE();
+
+        return this->promise.get_future();
+    }
+
+    void PeerConnection::SetRemoteDescriptionObserver::Reject(const std::string& error)
+    {
+        MSC_TRACE();
+
+        this->promise.set_exception(std::make_exception_ptr(MediaSoupClientError(error.c_str())));
+    }
+
+    void PeerConnection::SetRemoteDescriptionObserver::OnSetRemoteDescriptionComplete(webrtc::RTCError error)
+    {
+        MSC_TRACE();
+
+        if (!error.ok())
+        {
+            MSC_WARN(
+                    "webtc::SetRemoteDescriptionObserver failure [%s:%s]",
+                    webrtc::ToString(error.type()),
+                    error.message());
+
+            this->Reject(error.message());
+        }
+        else
+        {
+            this->promise.set_value();
+        }
+    }
 
 	/* SetSessionDescriptionObserver */
 
@@ -477,7 +546,7 @@ namespace mediasoupclient
 	}
 
 	void PeerConnection::RTCStatsCollectorCallback::OnStatsDelivered(
-	  const rtc::scoped_refptr<const webrtc::RTCStatsReport>& report)
+	  const webrtc::scoped_refptr<const webrtc::RTCStatsReport>& report)
 	{
 		MSC_TRACE();
 
@@ -507,7 +576,7 @@ namespace mediasoupclient
 	 * Triggered when media is received on a new stream from remote peer.
 	 */
 	void PeerConnection::PrivateListener::OnAddStream(
-	  rtc::scoped_refptr<webrtc::MediaStreamInterface> /*stream*/)
+	  webrtc::scoped_refptr<webrtc::MediaStreamInterface> /*stream*/)
 	{
 		MSC_TRACE();
 	}
@@ -516,7 +585,7 @@ namespace mediasoupclient
 	 * Triggered when a remote peer closes a stream.
 	 */
 	void PeerConnection::PrivateListener::OnRemoveStream(
-	  rtc::scoped_refptr<webrtc::MediaStreamInterface> /*stream*/)
+	  webrtc::scoped_refptr<webrtc::MediaStreamInterface> /*stream*/)
 	{
 		MSC_TRACE();
 	}
@@ -525,7 +594,7 @@ namespace mediasoupclient
 	 * Triggered when a remote peer opens a data channel.
 	 */
 	void PeerConnection::PrivateListener::OnDataChannel(
-	  rtc::scoped_refptr<webrtc::DataChannelInterface> /*dataChannel*/)
+	  webrtc::scoped_refptr<webrtc::DataChannelInterface> /*dataChannel*/)
 	{
 		MSC_TRACE();
 	}
@@ -604,8 +673,8 @@ namespace mediasoupclient
 	 * compatibility (and is called in the exact same situations as OnTrack).
 	 */
 	void PeerConnection::PrivateListener::OnAddTrack(
-	  rtc::scoped_refptr<webrtc::RtpReceiverInterface> /*receiver*/,
-	  const std::vector<rtc::scoped_refptr<webrtc::MediaStreamInterface>>& /*streams*/)
+	  webrtc::scoped_refptr<webrtc::RtpReceiverInterface> /*receiver*/,
+	  const std::vector<webrtc::scoped_refptr<webrtc::MediaStreamInterface>>& /*streams*/)
 	{
 		MSC_TRACE();
 	}
@@ -624,7 +693,7 @@ namespace mediasoupclient
 	 *   https://w3c.github.io/webrtc-pc/#set-description
 	 */
 	void PeerConnection::PrivateListener::OnTrack(
-	  rtc::scoped_refptr<webrtc::RtpTransceiverInterface> /*transceiver*/)
+	  webrtc::scoped_refptr<webrtc::RtpTransceiverInterface> /*transceiver*/)
 	{
 		MSC_TRACE();
 	}
@@ -640,7 +709,7 @@ namespace mediasoupclient
 	 *   https://w3c.github.io/webrtc-pc/#process-remote-track-removal
 	 */
 	void PeerConnection::PrivateListener::OnRemoveTrack(
-	  rtc::scoped_refptr<webrtc::RtpReceiverInterface> /*receiver*/)
+	  webrtc::scoped_refptr<webrtc::RtpReceiverInterface> /*receiver*/)
 	{
 		MSC_TRACE();
 	}
diff --git a/src/Producer.cpp b/src/Producer.cpp
index 0b2211b..4ffb251 100644
--- a/src/Producer.cpp
+++ b/src/Producer.cpp
@@ -13,8 +13,8 @@ namespace mediasoupclient
 	  Producer::Listener* listener,
 	  const std::string& id,
 	  const std::string& localId,
-	  webrtc::RtpSenderInterface* rtpSender,
-	  webrtc::MediaStreamTrackInterface* track,
+	  webrtc::scoped_refptr<webrtc::RtpSenderInterface> rtpSender,
+	  webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
 	  const json& rtpParameters,
 	  const json& appData)
 	  : privateListener(privateListener), listener(listener), id(id), localId(localId),
@@ -55,14 +55,14 @@ namespace mediasoupclient
 	{
 		MSC_TRACE();
 
-		return this->rtpSender;
+		return this->rtpSender.get();
 	}
 
 	webrtc::MediaStreamTrackInterface* Producer::GetTrack() const
 	{
 		MSC_TRACE();
 
-		return this->track;
+		return this->track.get();
 	}
 
 	const json& Producer::GetRtpParameters() const
@@ -153,7 +153,7 @@ namespace mediasoupclient
 	/**
 	 * Replaces the current track with a new one.
 	 */
-	void Producer::ReplaceTrack(webrtc::MediaStreamTrackInterface* track)
+	void Producer::ReplaceTrack(webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track)
 	{
 		MSC_TRACE();
 
diff --git a/src/Transport.cpp b/src/Transport.cpp
index fb57be5..8a1a4d5 100644
--- a/src/Transport.cpp
+++ b/src/Transport.cpp
@@ -174,7 +174,7 @@ namespace mediasoupclient
 	 */
 	Producer* SendTransport::Produce(
 	  Producer::Listener* producerListener,
-	  webrtc::MediaStreamTrackInterface* track,
+	  webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
 	  const std::vector<webrtc::RtpEncodingParameters>* encodings,
 	  const json* codecOptions,
 	  const json* codec,
@@ -345,7 +345,7 @@ namespace mediasoupclient
 		this->dataProducers.erase(dataProducer->GetId());
 	}
 
-	void SendTransport::OnReplaceTrack(const Producer* producer, webrtc::MediaStreamTrackInterface* track)
+	void SendTransport::OnReplaceTrack(const Producer* producer, webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track)
 	{
 		MSC_TRACE();
 
diff --git a/src/ortc.cpp b/src/ortc.cpp
index c44519b..32a5fe7 100644
--- a/src/ortc.cpp
+++ b/src/ortc.cpp
@@ -1645,8 +1645,8 @@ static bool matchCodecs(json& aCodec, json& bCodec, bool strict, bool modify)
 			if (aPacketizationMode != bPacketizationMode)
 				return false;
 
-			cricket::CodecParameterMap aParameters;
-			cricket::CodecParameterMap bParameters;
+			webrtc::CodecParameterMap aParameters;
+			webrtc::CodecParameterMap bParameters;
 
 			aParameters["level-asymmetry-allowed"] = std::to_string(getH264LevelAssimetryAllowed(aCodec));
 			aParameters["packetization-mode"]      = std::to_string(aPacketizationMode);
@@ -1658,7 +1658,7 @@ static bool matchCodecs(json& aCodec, json& bCodec, bool strict, bool modify)
 			if (!webrtc::H264IsSameProfile(aParameters, bParameters))
 				return false;
 
-			cricket::CodecParameterMap newParameters;
+			webrtc::CodecParameterMap newParameters;
 
 			try
 			{
diff --git a/test/deps/libwebrtc/pc/test/fake_audio_capture_module.cc b/test/deps/libwebrtc/pc/test/fake_audio_capture_module.cc
index 214ed6b..6ffa18c 100644
--- a/test/deps/libwebrtc/pc/test/fake_audio_capture_module.cc
+++ b/test/deps/libwebrtc/pc/test/fake_audio_capture_module.cc
@@ -12,12 +12,14 @@
 
 #include <string.h>
 
+#include "api/make_ref_counted.h"
+#include "api/units/time_delta.h"
 #include "rtc_base/checks.h"
-#include "rtc_base/location.h"
-#include "rtc_base/ref_counted_object.h"
 #include "rtc_base/thread.h"
 #include "rtc_base/time_utils.h"
 
+using ::webrtc::TimeDelta;
+
 // Audio sample value that is high enough that it doesn't occur naturally when
 // frames are being faked. E.g. NetEq will not generate this large sample value
 // unless it has received an audio frame containing a sample of this value.
@@ -33,11 +35,6 @@ static const int kTotalDelayMs = 0;
 static const int kClockDriftMs = 0;
 static const uint32_t kMaxVolume = 14392;
 
-enum {
-  MSG_START_PROCESS,
-  MSG_RUN_PROCESS,
-};
-
 FakeAudioCaptureModule::FakeAudioCaptureModule()
     : audio_callback_(nullptr),
       recording_(false),
@@ -47,9 +44,7 @@ FakeAudioCaptureModule::FakeAudioCaptureModule()
       current_mic_level_(kMaxVolume),
       started_(false),
       next_frame_time_(0),
-      frames_received_(0) {
-  process_thread_checker_.Detach();
-}
+      frames_received_(0) {}
 
 FakeAudioCaptureModule::~FakeAudioCaptureModule() {
   if (process_thread_) {
@@ -72,7 +67,7 @@ int FakeAudioCaptureModule::frames_received() const {
 
 int32_t FakeAudioCaptureModule::ActiveAudioLayer(
     AudioLayer* /*audio_layer*/) const {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
@@ -94,17 +89,17 @@ int32_t FakeAudioCaptureModule::Terminate() {
 }
 
 bool FakeAudioCaptureModule::Initialized() const {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
 int16_t FakeAudioCaptureModule::PlayoutDevices() {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
 int16_t FakeAudioCaptureModule::RecordingDevices() {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
@@ -112,7 +107,7 @@ int32_t FakeAudioCaptureModule::PlayoutDeviceName(
     uint16_t /*index*/,
     char /*name*/[webrtc::kAdmMaxDeviceNameSize],
     char /*guid*/[webrtc::kAdmMaxGuidSize]) {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
@@ -120,7 +115,7 @@ int32_t FakeAudioCaptureModule::RecordingDeviceName(
     uint16_t /*index*/,
     char /*name*/[webrtc::kAdmMaxDeviceNameSize],
     char /*guid*/[webrtc::kAdmMaxGuidSize]) {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
@@ -150,7 +145,7 @@ int32_t FakeAudioCaptureModule::SetRecordingDevice(
 }
 
 int32_t FakeAudioCaptureModule::PlayoutIsAvailable(bool* /*available*/) {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
@@ -164,7 +159,7 @@ bool FakeAudioCaptureModule::PlayoutIsInitialized() const {
 }
 
 int32_t FakeAudioCaptureModule::RecordingIsAvailable(bool* /*available*/) {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
@@ -241,7 +236,7 @@ int32_t FakeAudioCaptureModule::InitSpeaker() {
 }
 
 bool FakeAudioCaptureModule::SpeakerIsInitialized() const {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
@@ -251,40 +246,40 @@ int32_t FakeAudioCaptureModule::InitMicrophone() {
 }
 
 bool FakeAudioCaptureModule::MicrophoneIsInitialized() const {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
 int32_t FakeAudioCaptureModule::SpeakerVolumeIsAvailable(bool* /*available*/) {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
 int32_t FakeAudioCaptureModule::SetSpeakerVolume(uint32_t /*volume*/) {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
 int32_t FakeAudioCaptureModule::SpeakerVolume(uint32_t* /*volume*/) const {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
 int32_t FakeAudioCaptureModule::MaxSpeakerVolume(
     uint32_t* /*max_volume*/) const {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
 int32_t FakeAudioCaptureModule::MinSpeakerVolume(
     uint32_t* /*min_volume*/) const {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
 int32_t FakeAudioCaptureModule::MicrophoneVolumeIsAvailable(
     bool* /*available*/) {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
@@ -308,37 +303,37 @@ int32_t FakeAudioCaptureModule::MaxMicrophoneVolume(
 
 int32_t FakeAudioCaptureModule::MinMicrophoneVolume(
     uint32_t* /*min_volume*/) const {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
 int32_t FakeAudioCaptureModule::SpeakerMuteIsAvailable(bool* /*available*/) {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
 int32_t FakeAudioCaptureModule::SetSpeakerMute(bool /*enable*/) {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
 int32_t FakeAudioCaptureModule::SpeakerMute(bool* /*enabled*/) const {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
 int32_t FakeAudioCaptureModule::MicrophoneMuteIsAvailable(bool* /*available*/) {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
 int32_t FakeAudioCaptureModule::SetMicrophoneMute(bool /*enable*/) {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
 int32_t FakeAudioCaptureModule::MicrophoneMute(bool* /*enabled*/) const {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
@@ -357,7 +352,7 @@ int32_t FakeAudioCaptureModule::SetStereoPlayout(bool /*enable*/) {
 }
 
 int32_t FakeAudioCaptureModule::StereoPlayout(bool* /*enabled*/) const {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
@@ -376,7 +371,7 @@ int32_t FakeAudioCaptureModule::SetStereoRecording(bool enable) {
 }
 
 int32_t FakeAudioCaptureModule::StereoRecording(bool* /*enabled*/) const {
-  RTC_NOTREACHED();
+  RTC_DCHECK_NOTREACHED();
   return 0;
 }
 
@@ -386,21 +381,6 @@ int32_t FakeAudioCaptureModule::PlayoutDelay(uint16_t* delay_ms) const {
   return 0;
 }
 
-void FakeAudioCaptureModule::OnMessage(rtc::Message* msg) {
-  switch (msg->message_id) {
-    case MSG_START_PROCESS:
-      StartProcessP();
-      break;
-    case MSG_RUN_PROCESS:
-      ProcessFrameP();
-      break;
-    default:
-      // All existing messages should be caught. Getting here should never
-      // happen.
-      RTC_NOTREACHED();
-  }
-}
-
 bool FakeAudioCaptureModule::Initialize() {
   // Set the send buffer samples high enough that it would not occur on the
   // remote side unless a packet containing a sample of that magnitude has been
@@ -444,7 +424,7 @@ void FakeAudioCaptureModule::UpdateProcessing(bool start) {
       process_thread_ = rtc::Thread::Create();
       process_thread_->Start();
     }
-    process_thread_->Post(RTC_FROM_HERE, this, MSG_START_PROCESS);
+    process_thread_->PostTask([this] { StartProcessP(); });
   } else {
     if (process_thread_) {
       process_thread_->Stop();
@@ -490,7 +470,8 @@ void FakeAudioCaptureModule::ProcessFrameP() {
   const int64_t current_time = rtc::TimeMillis();
   const int64_t wait_time =
       (next_frame_time_ > current_time) ? next_frame_time_ - current_time : 0;
-  process_thread_->PostDelayed(RTC_FROM_HERE, wait_time, this, MSG_RUN_PROCESS);
+  process_thread_->PostDelayedTask([this] { ProcessFrameP(); },
+                                   TimeDelta::Millis(wait_time));
 }
 
 void FakeAudioCaptureModule::ReceiveFrameP() {
@@ -506,7 +487,7 @@ void FakeAudioCaptureModule::ReceiveFrameP() {
                                         kNumberOfChannels, kSamplesPerSecond,
                                         rec_buffer_, nSamplesOut,
                                         &elapsed_time_ms, &ntp_time_ms) != 0) {
-    RTC_NOTREACHED();
+    RTC_DCHECK_NOTREACHED();
   }
   RTC_CHECK(nSamplesOut == kNumberSamples);
 
@@ -532,7 +513,7 @@ void FakeAudioCaptureModule::SendFrameP() {
           send_buffer_, kNumberSamples, kNumberBytesPerSample,
           kNumberOfChannels, kSamplesPerSecond, kTotalDelayMs, kClockDriftMs,
           current_mic_level, key_pressed, current_mic_level) != 0) {
-    RTC_NOTREACHED();
+    RTC_DCHECK_NOTREACHED();
   }
   current_mic_level_ = current_mic_level;
 }
diff --git a/test/src/MediaStreamTrackFactory.cpp b/test/src/MediaStreamTrackFactory.cpp
index 69d0ae6..a5dd795 100644
--- a/test/src/MediaStreamTrackFactory.cpp
+++ b/test/src/MediaStreamTrackFactory.cpp
@@ -63,7 +63,7 @@ static void createFactory()
 }
 
 // Audio track creation.
-rtc::scoped_refptr<webrtc::AudioTrackInterface> createAudioTrack(const std::string& label)
+webrtc::scoped_refptr<webrtc::AudioTrackInterface> createAudioTrack(const std::string& label)
 {
 	if (!Factory)
 		createFactory();
@@ -71,16 +71,18 @@ rtc::scoped_refptr<webrtc::AudioTrackInterface> createAudioTrack(const std::stri
 	cricket::AudioOptions options;
 	options.highpass_filter = false;
 
-	rtc::scoped_refptr<webrtc::AudioSourceInterface> source = Factory->CreateAudioSource(options);
+	webrtc::scoped_refptr<webrtc::AudioSourceInterface> source = Factory->CreateAudioSource(options);
 
-	return Factory->CreateAudioTrack(label, source);
+	return Factory->CreateAudioTrack(label, source.get());
 }
 
 // Video track creation.
-rtc::scoped_refptr<webrtc::VideoTrackInterface> createVideoTrack(const std::string& label)
+webrtc::scoped_refptr<webrtc::VideoTrackInterface> createVideoTrack(const std::string& label)
 {
 	if (!Factory)
 		createFactory();
 
-	return Factory->CreateVideoTrack(label, webrtc::FakeVideoTrackSource::Create());
+    webrtc::scoped_refptr<webrtc::FakeVideoTrackSource> source = webrtc::FakeVideoTrackSource::Create();
+
+    return Factory->CreateVideoTrack(source, label);
 }
-- 
2.43.0

