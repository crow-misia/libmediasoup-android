diff --git a/include/Consumer.hpp b/include/Consumer.hpp
index d41c02f..b73a5e2 100644
--- a/include/Consumer.hpp
+++ b/include/Consumer.hpp
@@ -36,8 +36,8 @@ namespace mediasoupclient
 		  const std::string& id,
 		  const std::string& localId,
 		  const std::string& producerId,
-		  webrtc::RtpReceiverInterface* rtpReceiver,
-		  webrtc::MediaStreamTrackInterface* track,
+		  webrtc::scoped_refptr<webrtc::RtpReceiverInterface> rtpReceiver,
+		  webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
 		  const nlohmann::json& rtpParameters,
 		  const nlohmann::json& appData);

@@ -77,9 +77,9 @@ namespace mediasoupclient
 		// Closed flag.
 		bool closed{ false };
 		// Associated RTCRtpReceiver.
-		webrtc::RtpReceiverInterface* rtpReceiver{ nullptr };
+		webrtc::scoped_refptr<webrtc::RtpReceiverInterface> rtpReceiver{ nullptr };
 		// Local track.
-		webrtc::MediaStreamTrackInterface* track{ nullptr };
+		webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track{ nullptr };
 		// RTP parameters.
 		nlohmann::json rtpParameters;
 		// Paused flag.
diff --git a/include/Handler.hpp b/include/Handler.hpp
index 52ccfed..2b1467d 100644
--- a/include/Handler.hpp
+++ b/include/Handler.hpp
@@ -86,7 +86,7 @@ namespace mediasoupclient
 		struct SendResult
 		{
 			std::string localId;
-			webrtc::RtpSenderInterface* rtpSender{ nullptr };
+			webrtc::scoped_refptr<webrtc::RtpSenderInterface> rtpSender{ nullptr };
 			nlohmann::json rtpParameters;
 		};

@@ -103,12 +103,12 @@ namespace mediasoupclient

 	public:
 		SendResult Send(
-		  webrtc::MediaStreamTrackInterface* track,
+		  rtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
 		  std::vector<webrtc::RtpEncodingParameters>* encodings,
 		  const nlohmann::json* codecOptions,
 		  const nlohmann::json* codec);
 		void StopSending(const std::string& localId);
-		void ReplaceTrack(const std::string& localId, webrtc::MediaStreamTrackInterface* track);
+		void ReplaceTrack(const std::string& localId, webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track);
 		void SetMaxSpatialLayer(const std::string& localId, uint8_t spatialLayer);
 		nlohmann::json GetSenderStats(const std::string& localId);
 		void RestartIce(const nlohmann::json& iceParameters) override;
@@ -128,8 +128,8 @@ namespace mediasoupclient
 		struct RecvResult
 		{
 			std::string localId;
-			webrtc::RtpReceiverInterface* rtpReceiver{ nullptr };
-			webrtc::MediaStreamTrackInterface* track{ nullptr };
+			webrtc::scoped_refptr<webrtc::RtpReceiverInterface> rtpReceiver{ nullptr };
+			webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track{ nullptr };
 		};

 	public:
diff --git a/include/PeerConnection.hpp b/include/PeerConnection.hpp
index e102ec9..cf8f033 100644
--- a/include/PeerConnection.hpp
+++ b/include/PeerConnection.hpp
@@ -11,14 +11,6 @@ namespace mediasoupclient
 	class PeerConnection
 	{
 	public:
-		enum class SdpType : uint8_t
-		{
-			OFFER = 0,
-			PRANSWER,
-			ANSWER
-		};
-
-		static std::map<PeerConnection::SdpType, const std::string> sdpType2String;
 		static std::map<webrtc::PeerConnectionInterface::IceConnectionState, const std::string>
 		  iceConnectionState2String;
 		static std::map<webrtc::PeerConnectionInterface::IceGatheringState, const std::string>
@@ -150,21 +142,21 @@ namespace mediasoupclient
 		bool SetConfiguration(const webrtc::PeerConnectionInterface::RTCConfiguration& config);
 		std::string CreateOffer(const webrtc::PeerConnectionInterface::RTCOfferAnswerOptions& options);
 		std::string CreateAnswer(const webrtc::PeerConnectionInterface::RTCOfferAnswerOptions& options);
-		void SetLocalDescription(PeerConnection::SdpType type, const std::string& sdp);
-		void SetRemoteDescription(PeerConnection::SdpType type, const std::string& sdp);
+		void SetLocalDescription(webrtc::SdpType type, const std::string& sdp);
+		void SetRemoteDescription(webrtc::SdpType type, const std::string& sdp);
 		const std::string GetLocalDescription();
 		const std::string GetRemoteDescription();
 		std::vector<rtc::scoped_refptr<webrtc::RtpTransceiverInterface>> GetTransceivers() const;
-		rtc::scoped_refptr<webrtc::RtpTransceiverInterface> AddTransceiver(cricket::MediaType mediaType);
+		webrtc::scoped_refptr<webrtc::RtpTransceiverInterface> AddTransceiver(cricket::MediaType mediaType);
 		rtc::scoped_refptr<webrtc::RtpTransceiverInterface> AddTransceiver(
-		  rtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
+		  webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
 		  webrtc::RtpTransceiverInit rtpTransceiverInit);
 		std::vector<rtc::scoped_refptr<webrtc::RtpSenderInterface>> GetSenders();
 		bool RemoveTrack(rtc::scoped_refptr<webrtc::RtpSenderInterface> sender);
 		nlohmann::json GetStats();
-		nlohmann::json GetStats(rtc::scoped_refptr<webrtc::RtpSenderInterface> selector);
-		nlohmann::json GetStats(rtc::scoped_refptr<webrtc::RtpReceiverInterface> selector);
-		rtc::scoped_refptr<webrtc::DataChannelInterface> CreateDataChannel(
+		nlohmann::json GetStats(webrtc::scoped_refptr<webrtc::RtpSenderInterface> selector);
+		nlohmann::json GetStats(webrtc::scoped_refptr<webrtc::RtpReceiverInterface> selector);
+		webrtc::scoped_refptr<webrtc::DataChannelInterface> CreateDataChannel(
 		  const std::string& label, const webrtc::DataChannelInit* config);

 	private:
@@ -174,10 +166,10 @@ namespace mediasoupclient
 		std::unique_ptr<rtc::Thread> workerThread;

 		// PeerConnection factory.
-		rtc::scoped_refptr<webrtc::PeerConnectionFactoryInterface> peerConnectionFactory;
+		webrtc::scoped_refptr<webrtc::PeerConnectionFactoryInterface> peerConnectionFactory;

 		// PeerConnection instance.
-		rtc::scoped_refptr<webrtc::PeerConnectionInterface> pc;
+		webrtc::scoped_refptr<webrtc::PeerConnectionInterface> pc;
 	};
 } // namespace mediasoupclient

diff --git a/include/Producer.hpp b/include/Producer.hpp
index d8be084..4df6579 100644
--- a/include/Producer.hpp
+++ b/include/Producer.hpp
@@ -20,7 +20,7 @@ namespace mediasoupclient
 		public:
 			virtual void OnClose(Producer* producer) = 0;
 			virtual void OnReplaceTrack(
-			  const Producer* producer, webrtc::MediaStreamTrackInterface* newTrack)             = 0;
+			  const Producer* producer, webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> newTrack) = 0;
 			virtual void OnSetMaxSpatialLayer(const Producer* producer, uint8_t maxSpatialLayer) = 0;
 			virtual nlohmann::json OnGetStats(const Producer* producer)                          = 0;
 		};
@@ -38,8 +38,8 @@ namespace mediasoupclient
 		  Listener* listener,
 		  const std::string& id,
 		  const std::string& localId,
-		  webrtc::RtpSenderInterface* rtpSender,
-		  webrtc::MediaStreamTrackInterface* track,
+		  webrtc::scoped_refptr<webrtc::RtpSenderInterface> rtpSender,
+		  webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
 		  const nlohmann::json& rtpParameters,
 		  const nlohmann::json& appData);

@@ -58,7 +58,7 @@ namespace mediasoupclient
 		nlohmann::json GetStats() const;
 		void Pause();
 		void Resume();
-		void ReplaceTrack(webrtc::MediaStreamTrackInterface* track);
+		void ReplaceTrack(webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track);
 		void SetMaxSpatialLayer(uint8_t spatialLayer);

 	private:
@@ -79,9 +79,9 @@ namespace mediasoupclient
 		// Closed flag.
 		bool closed{ false };
 		// Associated RTCRtpSender.
-		webrtc::RtpSenderInterface* rtpSender{ nullptr };
+		webrtc::scoped_refptr<webrtc::RtpSenderInterface> rtpSender{ nullptr };
 		// Local track.
-		webrtc::MediaStreamTrackInterface* track{ nullptr };
+		webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track{ nullptr };
 		// RTP parameters.
 		nlohmann::json rtpParameters;
 		// Paused flag.
diff --git a/include/Transport.hpp b/include/Transport.hpp
index 90f3468..b19f180 100644
--- a/include/Transport.hpp
+++ b/include/Transport.hpp
@@ -131,7 +131,7 @@ namespace mediasoupclient
 	public:
 		Producer* Produce(
 		  Producer::Listener* producerListener,
-		  webrtc::MediaStreamTrackInterface* track,
+		  rtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
 		  const std::vector<webrtc::RtpEncodingParameters>* encodings,
 		  const nlohmann::json* codecOptions,
 		  const nlohmann::json* codec,
@@ -154,7 +154,7 @@ namespace mediasoupclient
 	public:
 		void OnClose(Producer* producer) override;
 		void OnClose(DataProducer* dataProducer) override;
-		void OnReplaceTrack(const Producer* producer, webrtc::MediaStreamTrackInterface* track) override;
+		void OnReplaceTrack(const Producer* producer, webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track) override;
 		void OnSetMaxSpatialLayer(const Producer* producer, uint8_t maxSpatialLayer) override;
 		nlohmann::json OnGetStats(const Producer* producer) override;

diff --git a/src/Consumer.cpp b/src/Consumer.cpp
index b0217d9..f3b3690 100644
--- a/src/Consumer.cpp
+++ b/src/Consumer.cpp
@@ -14,8 +14,8 @@ namespace mediasoupclient
 	  const std::string& id,
 	  const std::string& localId,
 	  const std::string& producerId,
-	  webrtc::RtpReceiverInterface* rtpReceiver,
-	  webrtc::MediaStreamTrackInterface* track,
+	  webrtc::scoped_refptr<webrtc::RtpReceiverInterface> rtpReceiver,
+	  webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
 	  const json& rtpParameters,
 	  const json& appData)
 	  : privateListener(privateListener), listener(listener), id(id), localId(localId),
@@ -64,14 +64,14 @@ namespace mediasoupclient
 	{
 		MSC_TRACE();

-		return this->rtpReceiver;
+		return this->rtpReceiver.get();
 	}

 	webrtc::MediaStreamTrackInterface* Consumer::GetTrack() const
 	{
 		MSC_TRACE();

-		return this->track;
+		return this->track.get();
 	}

 	const json& Consumer::GetRtpParameters() const
diff --git a/src/DataConsumer.cpp b/src/DataConsumer.cpp
index 627ea12..87ae623 100644
--- a/src/DataConsumer.cpp
+++ b/src/DataConsumer.cpp
@@ -13,7 +13,7 @@ namespace mediasoupclient
 	  DataConsumer::PrivateListener* privateListener,
 	  const std::string& id,
 	  const std::string& dataProducerId,
-	  rtc::scoped_refptr<webrtc::DataChannelInterface> dataChannel,
+	  webrtc::scoped_refptr<webrtc::DataChannelInterface> dataChannel,
 	  const json& sctpStreamParameters,
 	  const json& appData)
 	  : listener(listener), privateListener(privateListener), id(id), dataProducerId(dataProducerId),
diff --git a/src/DataProducer.cpp b/src/DataProducer.cpp
index c53119d..0da32af 100644
--- a/src/DataProducer.cpp
+++ b/src/DataProducer.cpp
@@ -11,7 +11,7 @@ namespace mediasoupclient
 	  DataProducer::PrivateListener* privateListener,
 	  DataProducer::Listener* listener,
 	  const std::string& id,
-	  rtc::scoped_refptr<webrtc::DataChannelInterface> dataChannel,
+	  webrtc::scoped_refptr<webrtc::DataChannelInterface> dataChannel,
 	  const json& sctpStreamParameters,
 	  const json& appData)
 	  : privateListener(privateListener), listener(listener), id(id), dataChannel(dataChannel),
diff --git a/src/Handler.cpp b/src/Handler.cpp
index 139da1d..7e3f457 100644
--- a/src/Handler.cpp
+++ b/src/Handler.cpp
@@ -171,7 +171,7 @@ namespace mediasoupclient
 	};

 	SendHandler::SendResult SendHandler::Send(
-	  webrtc::MediaStreamTrackInterface* track,
+	  webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
 	  std::vector<webrtc::RtpEncodingParameters>* encodings,
 	  const json* codecOptions,
 	  const json* codec)
@@ -265,7 +265,7 @@ namespace mediasoupclient

 			MSC_DEBUG("calling pc->SetLocalDescription():\n%s", offer.c_str());

-			this->pc->SetLocalDescription(PeerConnection::SdpType::OFFER, offer);
+			this->pc->SetLocalDescription(webrtc::SdpType::kOffer, offer);

 			// We can now get the transceiver.mid.
 			localId = transceiver->mid().value();
@@ -352,7 +352,7 @@ namespace mediasoupclient

 		MSC_DEBUG("calling pc->SetRemoteDescription():\n%s", answer.c_str());

-		this->pc->SetRemoteDescription(PeerConnection::SdpType::ANSWER, answer);
+		this->pc->SetRemoteDescription(webrtc::SdpType::kAnswer, answer);

 		// Store in the map.
 		this->mapMidTransceiver[localId] = transceiver;
@@ -398,7 +398,7 @@ namespace mediasoupclient
 		// This will fill sctpStreamParameters's missing fields with default values.
 		ortc::validateSctpStreamParameters(sctpStreamParameters);

-		rtc::scoped_refptr<webrtc::DataChannelInterface> webrtcDataChannel =
+		webrtc::scoped_refptr<webrtc::DataChannelInterface> webrtcDataChannel =
 		  this->pc->CreateDataChannel(label, &dataChannelInit);

 		// Increase next id.
@@ -432,14 +432,14 @@ namespace mediasoupclient

 			MSC_DEBUG("calling pc.setLocalDescription() [offer:%s]", offer.c_str());

-			this->pc->SetLocalDescription(PeerConnection::SdpType::OFFER, offer);
+			this->pc->SetLocalDescription(webrtc::SdpType::kOffer, offer);
 			this->remoteSdp->SendSctpAssociation(*offerMediaObject);

 			auto sdpAnswer = this->remoteSdp->GetSdp();

 			MSC_DEBUG("calling pc.setRemoteDescription() [answer:%s]", sdpAnswer.c_str());

-			this->pc->SetRemoteDescription(PeerConnection::SdpType::ANSWER, sdpAnswer);
+			this->pc->SetRemoteDescription(webrtc::SdpType::kAnswer, sdpAnswer);
 			this->hasDataChannelMediaSection = true;
 		}

@@ -476,7 +476,7 @@ namespace mediasoupclient
 		MSC_DEBUG("calling pc->SetLocalDescription():\n%s", offer.c_str());

 		// May throw.
-		this->pc->SetLocalDescription(PeerConnection::SdpType::OFFER, offer);
+		this->pc->SetLocalDescription(webrtc::SdpType::kOffer, offer);

 		auto localSdpObj = sdptransform::parse(this->pc->GetLocalDescription());
 		auto answer      = this->remoteSdp->GetSdp();
@@ -484,10 +484,10 @@ namespace mediasoupclient
 		MSC_DEBUG("calling pc->SetRemoteDescription():\n%s", answer.c_str());

 		// May throw.
-		this->pc->SetRemoteDescription(PeerConnection::SdpType::ANSWER, answer);
+		this->pc->SetRemoteDescription(webrtc::SdpType::kAnswer, answer);
 	}

-	void SendHandler::ReplaceTrack(const std::string& localId, webrtc::MediaStreamTrackInterface* track)
+	void SendHandler::ReplaceTrack(const std::string& localId, webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track)
 	{
 		MSC_TRACE();

@@ -503,7 +503,7 @@ namespace mediasoupclient

 		auto transceiver = localIdIt->second;

-		transceiver->sender()->SetTrack(track);
+		transceiver->sender()->SetTrack(track.get());
 	}

 	void SendHandler::SetMaxSpatialLayer(const std::string& localId, uint8_t spatialLayer)
@@ -609,7 +609,7 @@ namespace mediasoupclient
 		MSC_DEBUG("calling pc->SetLocalDescription():\n%s", offer.c_str());

 		// May throw.
-		this->pc->SetLocalDescription(PeerConnection::SdpType::OFFER, offer);
+		this->pc->SetLocalDescription(webrtc::SdpType::kOffer, offer);

 		auto localSdpObj = sdptransform::parse(this->pc->GetLocalDescription());
 		auto answer      = this->remoteSdp->GetSdp();
@@ -617,7 +617,7 @@ namespace mediasoupclient
 		MSC_DEBUG("calling pc->SetRemoteDescription():\n%s", answer.c_str());

 		// May throw.
-		this->pc->SetRemoteDescription(PeerConnection::SdpType::ANSWER, answer);
+		this->pc->SetRemoteDescription(webrtc::SdpType::kAnswer, answer);
 	}

 	/* RecvHandler methods */
@@ -660,7 +660,7 @@ namespace mediasoupclient
 		MSC_DEBUG("calling pc->setRemoteDescription():\n%s", offer.c_str());

 		// May throw.
-		this->pc->SetRemoteDescription(PeerConnection::SdpType::OFFER, offer);
+		this->pc->SetRemoteDescription(webrtc::SdpType::kOffer, offer);

 		webrtc::PeerConnectionInterface::RTCOfferAnswerOptions options;

@@ -687,7 +687,7 @@ namespace mediasoupclient
 		MSC_DEBUG("calling pc->SetLocalDescription():\n%s", answer.c_str());

 		// May throw.
-		this->pc->SetLocalDescription(PeerConnection::SdpType::ANSWER, answer);
+		this->pc->SetLocalDescription(webrtc::SdpType::kAnswer, answer);

 		auto transceivers  = this->pc->GetTransceivers();
 		auto transceiverIt = std::find_if(
@@ -731,7 +731,7 @@ namespace mediasoupclient
 		// This will fill sctpStreamParameters's missing fields with default values.
 		ortc::validateSctpStreamParameters(sctpStreamParameters);

-		rtc::scoped_refptr<webrtc::DataChannelInterface> webrtcDataChannel =
+		webrtc::scoped_refptr<webrtc::DataChannelInterface> webrtcDataChannel =
 		  this->pc->CreateDataChannel(label, &dataChannelInit);

 		// If this is the first DataChannel we need to create the SDP answer with
@@ -744,7 +744,7 @@ namespace mediasoupclient
 			MSC_DEBUG("calling pc->setRemoteDescription() [offer:%s]", sdpOffer.c_str());

 			// May throw.
-			this->pc->SetRemoteDescription(PeerConnection::SdpType::OFFER, sdpOffer);
+			this->pc->SetRemoteDescription(webrtc::SdpType::kOffer, sdpOffer);

 			webrtc::PeerConnectionInterface::RTCOfferAnswerOptions options;
 			auto sdpAnswer = this->pc->CreateAnswer(options);
@@ -759,7 +759,7 @@ namespace mediasoupclient
 			MSC_DEBUG("calling pc->setLocalDescription() [answer: %s]", sdpAnswer.c_str());

 			// May throw.
-			this->pc->SetLocalDescription(PeerConnection::SdpType::ANSWER, sdpAnswer);
+			this->pc->SetLocalDescription(webrtc::SdpType::kAnswer, sdpAnswer);

 			this->hasDataChannelMediaSection = true;
 		}
@@ -783,7 +783,7 @@ namespace mediasoupclient
 		if (localIdIt == this->mapMidTransceiver.end())
 			MSC_THROW_ERROR("associated RtpTransceiver not found");

-		auto& transceiver = localIdIt->second;
+		auto transceiver = localIdIt->second;

 		MSC_DEBUG("disabling mid:%s", transceiver->mid().value().c_str());

@@ -794,7 +794,7 @@ namespace mediasoupclient
 		MSC_DEBUG("calling pc->setRemoteDescription():\n%s", offer.c_str());

 		// May throw.
-		this->pc->SetRemoteDescription(PeerConnection::SdpType::OFFER, offer);
+		this->pc->SetRemoteDescription(webrtc::SdpType::kOffer, offer);

 		webrtc::PeerConnectionInterface::RTCOfferAnswerOptions options;

@@ -804,7 +804,7 @@ namespace mediasoupclient
 		MSC_DEBUG("calling pc->SetLocalDescription():\n%s", answer.c_str());

 		// May throw.
-		this->pc->SetLocalDescription(PeerConnection::SdpType::ANSWER, answer);
+		this->pc->SetLocalDescription(webrtc::SdpType::kAnswer, answer);
 	}

 	json RecvHandler::GetReceiverStats(const std::string& localId)
@@ -818,7 +818,7 @@ namespace mediasoupclient
 		if (localIdIt == this->mapMidTransceiver.end())
 			MSC_THROW_ERROR("associated RtpTransceiver not found");

-		auto& transceiver = localIdIt->second;
+		auto transceiver = localIdIt->second;

 		// May throw.
 		auto stats = this->pc->GetStats(transceiver->receiver());
@@ -841,7 +841,7 @@ namespace mediasoupclient
 		MSC_DEBUG("calling pc->setRemoteDescription():\n%s", offer.c_str());

 		// May throw.
-		this->pc->SetRemoteDescription(PeerConnection::SdpType::OFFER, offer);
+		this->pc->SetRemoteDescription(webrtc::SdpType::kOffer, offer);

 		webrtc::PeerConnectionInterface::RTCOfferAnswerOptions options;

@@ -851,7 +851,7 @@ namespace mediasoupclient
 		MSC_DEBUG("calling pc->SetLocalDescription():\n%s", answer.c_str());

 		// May throw.
-		this->pc->SetLocalDescription(PeerConnection::SdpType::ANSWER, answer);
+		this->pc->SetLocalDescription(webrtc::SdpType::kAnswer, answer);
 	}
 } // namespace mediasoupclient

diff --git a/src/PeerConnection.cpp b/src/PeerConnection.cpp
index 5280437..c889f72 100644
--- a/src/PeerConnection.cpp
+++ b/src/PeerConnection.cpp
@@ -31,13 +31,6 @@ namespace mediasoupclient
 	/* Static. */

 	// clang-format off
-	std::map<PeerConnection::SdpType, const std::string> PeerConnection::sdpType2String =
-	{
-		{ PeerConnection::SdpType::OFFER,    "offer"    },
-		{ PeerConnection::SdpType::PRANSWER, "pranswer" },
-		{ PeerConnection::SdpType::ANSWER,   "answer"   }
-	};
-
 	std::map<webrtc::PeerConnectionInterface::IceConnectionState, const std::string>
 		PeerConnection::iceConnectionState2String =
 	{
@@ -86,7 +79,7 @@ namespace mediasoupclient
 		if ((options != nullptr) && (options->factory != nullptr))
 		{
 			this->peerConnectionFactory =
-			  rtc::scoped_refptr<webrtc::PeerConnectionFactoryInterface>(options->factory);
+			  webrtc::scoped_refptr<webrtc::PeerConnectionFactoryInterface>(options->factory);
 		}
 		else
 		{
@@ -128,9 +121,11 @@ namespace mediasoupclient
 		config.sdp_semantics = webrtc::SdpSemantics::kUnifiedPlan;

 		// Create the webrtc::Peerconnection.
-		this->pc =
-		  this->peerConnectionFactory->CreatePeerConnection(config, nullptr, nullptr, privateListener);
-	}
+        webrtc::PeerConnectionDependencies dependencies(privateListener);
+        auto result = this->peerConnectionFactory->CreatePeerConnectionOrError(config, std::move(dependencies));
+
+        this->pc = result.MoveValue();
+    }

 	void PeerConnection::Close()
 	{
@@ -195,7 +190,7 @@ namespace mediasoupclient
 		return future.get();
 	}

-	void PeerConnection::SetLocalDescription(PeerConnection::SdpType type, const std::string& sdp)
+	void PeerConnection::SetLocalDescription(webrtc::SdpType type, const std::string& sdp)
 	{
 		MSC_TRACE();

@@ -204,10 +199,9 @@ namespace mediasoupclient
 		rtc::scoped_refptr<SetLocalDescriptionObserver> observer(
 		  new rtc::RefCountedObject<SetLocalDescriptionObserver>());

-		const auto& typeStr = sdpType2String[type];
 		auto future         = observer->GetFuture();

-		sessionDescription.reset(webrtc::CreateSessionDescription(typeStr, sdp, &error));
+		sessionDescription = webrtc::CreateSessionDescription(type, sdp, &error);
 		if (sessionDescription == nullptr)
 		{
 			MSC_WARN(
@@ -215,7 +209,9 @@ namespace mediasoupclient
 			  error.line.c_str(),
 			  error.description.c_str());

-			observer->Reject(error.description);
+            auto description = std::string(error.description);
+
+            observer->Reject(description);

 			return future.get();
 		}
@@ -225,7 +221,7 @@ namespace mediasoupclient
 		return future.get();
 	}

-	void PeerConnection::SetRemoteDescription(PeerConnection::SdpType type, const std::string& sdp)
+	void PeerConnection::SetRemoteDescription(webrtc::SdpType type, const std::string& sdp)
 	{
 		MSC_TRACE();

@@ -234,10 +230,9 @@ namespace mediasoupclient
 		rtc::scoped_refptr<SetRemoteDescriptionObserver> observer(
 		  new rtc::RefCountedObject<SetRemoteDescriptionObserver>());

-		const auto& typeStr = sdpType2String[type];
 		auto future         = observer->GetFuture();

-		sessionDescription.reset(webrtc::CreateSessionDescription(typeStr, sdp, &error));
+		sessionDescription = webrtc::CreateSessionDescription(type, sdp, &error);
 		if (sessionDescription == nullptr)
 		{
 			MSC_WARN(
@@ -245,7 +240,9 @@ namespace mediasoupclient
 			  error.line.c_str(),
 			  error.description.c_str());

-			observer->Reject(error.description);
+            auto description = std::string(error.description);
+
+			observer->Reject(description);

 			return future.get();
 		}
@@ -279,14 +276,14 @@ namespace mediasoupclient
 		return sdp;
 	}

-	std::vector<rtc::scoped_refptr<webrtc::RtpTransceiverInterface>> PeerConnection::GetTransceivers() const
+	std::vector<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>> PeerConnection::GetTransceivers() const
 	{
 		MSC_TRACE();

 		return this->pc->GetTransceivers();
 	}

-	rtc::scoped_refptr<webrtc::RtpTransceiverInterface> PeerConnection::AddTransceiver(
+	webrtc::scoped_refptr<webrtc::RtpTransceiverInterface> PeerConnection::AddTransceiver(
 	  cricket::MediaType mediaType)
 	{
 		MSC_TRACE();
@@ -295,7 +292,7 @@ namespace mediasoupclient

 		if (!result.ok())
 		{
-			rtc::scoped_refptr<webrtc::RtpTransceiverInterface> transceiver = nullptr;
+			webrtc::scoped_refptr<webrtc::RtpTransceiverInterface> transceiver = nullptr;

 			return transceiver;
 		}
@@ -303,8 +300,8 @@ namespace mediasoupclient
 		return result.value();
 	}

-	rtc::scoped_refptr<webrtc::RtpTransceiverInterface> PeerConnection::AddTransceiver(
-	  rtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
+	webrtc::scoped_refptr<webrtc::RtpTransceiverInterface> PeerConnection::AddTransceiver(
+	  webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
 	  webrtc::RtpTransceiverInit rtpTransceiverInit)
 	{
 		MSC_TRACE();
@@ -323,7 +320,7 @@ namespace mediasoupclient

 		if (!result.ok())
 		{
-			rtc::scoped_refptr<webrtc::RtpTransceiverInterface> transceiver = nullptr;
+			webrtc::scoped_refptr<webrtc::RtpTransceiverInterface> transceiver = nullptr;

 			return transceiver;
 		}
@@ -331,7 +328,7 @@ namespace mediasoupclient
 		return result.value();
 	}

-	std::vector<rtc::scoped_refptr<webrtc::RtpSenderInterface>> PeerConnection::GetSenders()
+	std::vector<webrtc::scoped_refptr<webrtc::RtpSenderInterface>> PeerConnection::GetSenders()
 	{
 		MSC_TRACE();

@@ -351,7 +348,7 @@ namespace mediasoupclient
 	{
 		MSC_TRACE();

-		rtc::scoped_refptr<RTCStatsCollectorCallback> callback(
+		webrtc::scoped_refptr<RTCStatsCollectorCallback> callback(
 		  new rtc::RefCountedObject<RTCStatsCollectorCallback>());

 		auto future = callback->GetFuture();
@@ -361,11 +358,11 @@ namespace mediasoupclient
 		return future.get();
 	}

-	json PeerConnection::GetStats(rtc::scoped_refptr<webrtc::RtpSenderInterface> selector)
+	json PeerConnection::GetStats(webrtc::scoped_refptr<webrtc::RtpSenderInterface> selector)
 	{
 		MSC_TRACE();

-		rtc::scoped_refptr<RTCStatsCollectorCallback> callback(
+		webrtc::scoped_refptr<RTCStatsCollectorCallback> callback(
 		  new rtc::RefCountedObject<RTCStatsCollectorCallback>());

 		auto future = callback->GetFuture();
@@ -375,11 +372,11 @@ namespace mediasoupclient
 		return future.get();
 	}

-	json PeerConnection::GetStats(rtc::scoped_refptr<webrtc::RtpReceiverInterface> selector)
+	json PeerConnection::GetStats(webrtc::scoped_refptr<webrtc::RtpReceiverInterface> selector)
 	{
 		MSC_TRACE();

-		rtc::scoped_refptr<RTCStatsCollectorCallback> callback(
+		webrtc::scoped_refptr<RTCStatsCollectorCallback> callback(
 		  new rtc::RefCountedObject<RTCStatsCollectorCallback>());

 		auto future = callback->GetFuture();
@@ -389,7 +386,7 @@ namespace mediasoupclient
 		return future.get();
 	}

-	rtc::scoped_refptr<webrtc::DataChannelInterface> PeerConnection::CreateDataChannel(
+	webrtc::scoped_refptr<webrtc::DataChannelInterface> PeerConnection::CreateDataChannel(
 	  const std::string& label, const webrtc::DataChannelInit* config)
 	{
 		MSC_TRACE();
@@ -573,7 +570,7 @@ namespace mediasoupclient
 	}

 	void PeerConnection::RTCStatsCollectorCallback::OnStatsDelivered(
-	  const rtc::scoped_refptr<const webrtc::RTCStatsReport>& report)
+	  const webrtc::scoped_refptr<const webrtc::RTCStatsReport>& report)
 	{
 		MSC_TRACE();

@@ -603,7 +600,7 @@ namespace mediasoupclient
 	 * Triggered when media is received on a new stream from remote peer.
 	 */
 	void PeerConnection::PrivateListener::OnAddStream(
-	  rtc::scoped_refptr<webrtc::MediaStreamInterface> /*stream*/)
+	  webrtc::scoped_refptr<webrtc::MediaStreamInterface> /*stream*/)
 	{
 		MSC_TRACE();
 	}
@@ -612,7 +609,7 @@ namespace mediasoupclient
 	 * Triggered when a remote peer closes a stream.
 	 */
 	void PeerConnection::PrivateListener::OnRemoveStream(
-	  rtc::scoped_refptr<webrtc::MediaStreamInterface> /*stream*/)
+	  webrtc::scoped_refptr<webrtc::MediaStreamInterface> /*stream*/)
 	{
 		MSC_TRACE();
 	}
@@ -621,7 +618,7 @@ namespace mediasoupclient
 	 * Triggered when a remote peer opens a data channel.
 	 */
 	void PeerConnection::PrivateListener::OnDataChannel(
-	  rtc::scoped_refptr<webrtc::DataChannelInterface> /*dataChannel*/)
+	  webrtc::scoped_refptr<webrtc::DataChannelInterface> /*dataChannel*/)
 	{
 		MSC_TRACE();
 	}
@@ -700,8 +697,8 @@ namespace mediasoupclient
 	 * compatibility (and is called in the exact same situations as OnTrack).
 	 */
 	void PeerConnection::PrivateListener::OnAddTrack(
-	  rtc::scoped_refptr<webrtc::RtpReceiverInterface> /*receiver*/,
-	  const std::vector<rtc::scoped_refptr<webrtc::MediaStreamInterface>>& /*streams*/)
+	  webrtc::scoped_refptr<webrtc::RtpReceiverInterface> /*receiver*/,
+	  const std::vector<webrtc::scoped_refptr<webrtc::MediaStreamInterface>>& /*streams*/)
 	{
 		MSC_TRACE();
 	}
@@ -720,7 +717,7 @@ namespace mediasoupclient
 	 *   https://w3c.github.io/webrtc-pc/#set-description
 	 */
 	void PeerConnection::PrivateListener::OnTrack(
-	  rtc::scoped_refptr<webrtc::RtpTransceiverInterface> /*transceiver*/)
+	  webrtc::scoped_refptr<webrtc::RtpTransceiverInterface> /*transceiver*/)
 	{
 		MSC_TRACE();
 	}
@@ -736,7 +733,7 @@ namespace mediasoupclient
 	 *   https://w3c.github.io/webrtc-pc/#process-remote-track-removal
 	 */
 	void PeerConnection::PrivateListener::OnRemoveTrack(
-	  rtc::scoped_refptr<webrtc::RtpReceiverInterface> /*receiver*/)
+	  webrtc::scoped_refptr<webrtc::RtpReceiverInterface> /*receiver*/)
 	{
 		MSC_TRACE();
 	}
diff --git a/src/Producer.cpp b/src/Producer.cpp
index 0b2211b..4ffb251 100644
--- a/src/Producer.cpp
+++ b/src/Producer.cpp
@@ -13,8 +13,8 @@ namespace mediasoupclient
 	  Producer::Listener* listener,
 	  const std::string& id,
 	  const std::string& localId,
-	  webrtc::RtpSenderInterface* rtpSender,
-	  webrtc::MediaStreamTrackInterface* track,
+	  webrtc::scoped_refptr<webrtc::RtpSenderInterface> rtpSender,
+	  webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
 	  const json& rtpParameters,
 	  const json& appData)
 	  : privateListener(privateListener), listener(listener), id(id), localId(localId),
@@ -55,14 +55,14 @@ namespace mediasoupclient
 	{
 		MSC_TRACE();

-		return this->rtpSender;
+		return this->rtpSender.get();
 	}

 	webrtc::MediaStreamTrackInterface* Producer::GetTrack() const
 	{
 		MSC_TRACE();

-		return this->track;
+		return this->track.get();
 	}

 	const json& Producer::GetRtpParameters() const
@@ -153,7 +153,7 @@ namespace mediasoupclient
 	/**
 	 * Replaces the current track with a new one.
 	 */
-	void Producer::ReplaceTrack(webrtc::MediaStreamTrackInterface* track)
+	void Producer::ReplaceTrack(webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track)
 	{
 		MSC_TRACE();

diff --git a/src/Transport.cpp b/src/Transport.cpp
index 478351e..e835daa 100644
--- a/src/Transport.cpp
+++ b/src/Transport.cpp
@@ -174,7 +174,7 @@ namespace mediasoupclient
 	 */
 	Producer* SendTransport::Produce(
 	  Producer::Listener* producerListener,
-	  webrtc::MediaStreamTrackInterface* track,
+	  webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track,
 	  const std::vector<webrtc::RtpEncodingParameters>* encodings,
 	  const json* codecOptions,
 	  const json* codec,
@@ -346,7 +346,7 @@ namespace mediasoupclient
 		this->dataProducers.erase(dataProducer->GetId());
 	}

-	void SendTransport::OnReplaceTrack(const Producer* producer, webrtc::MediaStreamTrackInterface* track)
+	void SendTransport::OnReplaceTrack(const Producer* producer, webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface> track)
 	{
 		MSC_TRACE();

diff --git a/src/mediasoupclient.cpp b/src/mediasoupclient.cpp
index f25d78b..e54e587 100644
--- a/src/mediasoupclient.cpp
+++ b/src/mediasoupclient.cpp
@@ -3,7 +3,7 @@
 #include "mediasoupclient.hpp"
 #include "Logger.hpp"
 #include "version.hpp"
-#include <rtc_base/helpers.h>
+#include <rtc_base/crypto_random.h>
 #include <rtc_base/ssl_adapter.h>
 #include <rtc_base/time_utils.h>
 #include <sstream>
diff --git a/src/ortc.cpp b/src/ortc.cpp
index 483ad9b..1478d4e 100644
--- a/src/ortc.cpp
+++ b/src/ortc.cpp
@@ -1660,8 +1660,8 @@ static bool matchCodecs(json& aCodec, json& bCodec, bool strict, bool modify)
 			if (aPacketizationMode != bPacketizationMode)
 				return false;

-			cricket::CodecParameterMap aParameters;
-			cricket::CodecParameterMap bParameters;
+			webrtc::CodecParameterMap aParameters;
+			webrtc::CodecParameterMap bParameters;

 			aParameters["level-asymmetry-allowed"] = std::to_string(getH264LevelAssimetryAllowed(aCodec));
 			aParameters["packetization-mode"]      = std::to_string(aPacketizationMode);
@@ -1673,7 +1673,7 @@ static bool matchCodecs(json& aCodec, json& bCodec, bool strict, bool modify)
 			if (!webrtc::H264IsSameProfile(aParameters, bParameters))
 				return false;

-			cricket::CodecParameterMap newParameters;
+			webrtc::CodecParameterMap newParameters;

 			try
 			{
diff --git a/test/src/MediaStreamTrackFactory.cpp b/test/src/MediaStreamTrackFactory.cpp
index b974c5b..c657be5 100644
--- a/test/src/MediaStreamTrackFactory.cpp
+++ b/test/src/MediaStreamTrackFactory.cpp
@@ -92,7 +92,7 @@ void MediaStreamTrackFactory::ReleaseThreads()
 }

 // Audio track creation.
-rtc::scoped_refptr<webrtc::AudioTrackInterface> createAudioTrack(const std::string& label)
+webrtc::scoped_refptr<webrtc::AudioTrackInterface> createAudioTrack(const std::string& label)
 {
 	MediaStreamTrackFactory& singleton = MediaStreamTrackFactory::getInstance();

@@ -106,7 +106,7 @@ rtc::scoped_refptr<webrtc::AudioTrackInterface> createAudioTrack(const std::stri
 }

 // Video track creation.
-rtc::scoped_refptr<webrtc::VideoTrackInterface> createVideoTrack(const std::string& label)
+webrtc::scoped_refptr<webrtc::VideoTrackInterface> createVideoTrack(const std::string& label)
 {
 	MediaStreamTrackFactory& singleton = MediaStreamTrackFactory::getInstance();

--
2.45.2
